# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
    - 'qa*'
    - 'release*'

variables:
  # Azure Resource Manager connection created during pipeline creation
  #azureServiceConnectionId:
  
  # Web app name
  # qaWebAppName:

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  #qaEnvironmentName:

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  qaTagPrefix: 'refs/tags/qa'
  productionTagPrefix: 'refs/tags/release'

  # Python version: 3.7
  pythonVersion: '3.7'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: QADeploy
  displayName: 'Deploy Web App for QA'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      startsWith(variables['Build.SourceBranch'], variables['qaTagPrefix'])
    )
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(qaEnvironmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App for QA'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(qaWebAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
          - task: AzureAppServiceSettings@1
            displayName: Azure App Service Settings
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(WebApp_Name)
            # To deploy the settings on a slot, provide slot name as below. By default, the settings would be applied to the actual Web App (Production slot)
            # slotName: staging
              appSettings: |
                [
                  {
                    "name": "DJANGO_OTHER_ENV_VAR",
                    "value": "set env in yaml",
                    "slotSetting": false
                  }
                ]

- stage: ProductionDeploy
  displayName: 'Deploy Web App for Production'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      startsWith(variables['Build.SourceBranch'], variables['productionTagPrefix'])
    )
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(productionEnvironmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App for Production'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(productionWebAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip